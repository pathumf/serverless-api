name: CI
on: 
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - name: go build
        uses: actions/setup-go@v3
        with: 
          go-version: '>=1.17.0'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
        env: 
          CI: true #upload coverage.out as artifact
      - run: GOOS=linux GOARCH=amd64 go build -o build/. -trimpath ./cmd/main.go



# name: CI
# on: 
#   pull_request:
#     branches: [main]
#   push:
#     branches: [main]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps: 
#       - uses: actions/checkout@v3

#       - name: Setup Go
#         uses: actions/setup-go@v3
#         with: 
#           go-version: '>=1.17.0'

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Run Uiit Test
#       - run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
#         env: 
#           CI: true #upload coverage.out as artifact

#       - name: Build Project
#       - run: GOOS=linux GOARCH=amd64 go build -o build/. -trimpath ./cmd/main.go

      # - uses: hashicorp/setup-terraform@v2
      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check -recursive modules
      #   continue-on-error: true

      # - name: Terraform Init
      #   id: init
      #   run: terraform init '-backend-config=bucket=tfstate-resources' '-backend-config=region=us-east-1' '-backend-config=key=tfstate/api/dev/serverless-api.tfstate'

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -no-color -env=dev -aws_region=us-east-1 -api_version=v1.0.2
      #   continue-on-error: true

      #   - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      #   - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false -env=dev -aws_region=us-east-1 -api_version=${GITHUB_SHA::8}
